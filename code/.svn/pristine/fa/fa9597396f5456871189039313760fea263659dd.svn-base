<document xmlns="http://maven.apache.org/changes/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/changes/1.0.0 http://maven.apache.org/xsd/changes-1.0.0.xsd">
  <body>

    <release version="3.03.01" date="2018-11-XX" description="Updates to dsol-swing, dsol-web">
      <action dev="averbraeck" type="update">
        The DSOL categories for the CategoryLogger in DJUTILS have been added to dsol-base into
        the nl.tudelft.simulation.dsol.logger package.
      </action>
    </release>

    <release version="3.03.00" date="2018-11-17" description="Major refactoring, dsol-web and dsol-animation">
      <action dev="averbraeck" type="update">
        Generic classes to multiple projects have been moved to the DJUTILS project. 
        Examples are the immutable collections, the Throw class, URLResource, Primitive,
        ClassUtil, and the CategoryLogger for tinylog. See www.djutils.org for more info.
      </action>
      <action dev="averbraeck" type="add">
        Distribution functions for scalars with units have been added. They wrap one of
        the existing (continuous) distributions. Example:
<![CDATA[
  <pre>DistContinuousLength lengthDist = new DistContinuousLength(
    new DistUniform(stream, 1.0, 2.0), LengthUnit.METER);
  ...
  Length length = lengthDist.draw();
</pre>
]]>
      </action>
      <action dev="averbraeck" type="update">
        Because of the distribution functions with scalars, the existing distribution class
        DistContinuousTime has been renamed into DistContinuousSimulationTime.
      </action>
      <action dev="averbraeck" type="update">
        The ExperimentalFrame, Experiment, Replication and Treatment classes have been 
        provided with generics to make them compatible with the type of time used, and
        the type of simulator used. Easy access classes for the 8 most common types of
        simulation time have been provided.
      </action>
      <action dev="averbraeck" type="add">
        Since version 3.03 of DSOL, models have specified input parameters. These can be 
        shown on the screen for user input, set by reading them from a file, or set in the 
        user code of the model itself. The input parameters are stored a SortedMap. 
        Each input parameter has a key (a String without spaces and periods) and a value. 
        Sorting of the input parameters is done based on a priority variable, currently 
        implemented as a double (making it easy to insert a parameter between parameter #3 
        with a priority 3 and parameter #4 with a priority 4 by giving it a priority 
        value of e.g., 3.5).
      </action>
      <action dev="averbraeck" type="update">
       The DSOLModel interface has convenience methods for the extension classes. So it is now
       possible to use e.g.:
<![CDATA[
<pre>
    public SimulatorInterface.TimeDouble getSimulator()
</pre>
]]>
      </action>
      <action dev="averbraeck" type="add">
        A class AbstractDSOLModel to easily create a model has been added, together with easy 
        access inner classes. The AbstractDSOLModel contains fields and access methods for the
        simulator, input parameters, and output statistics. It extends EventProducer to provide
        statistics to the statistics classes.   
      </action>
      <action dev="averbraeck" type="update">
        The DSOLModel interface has been moved to the nl.tudelft.simulation.dsol.model package. 
      </action>
      <action dev="averbraeck" type="update">
        The ExperimentParser has been moved to the dsol-demo project as it is only used there.
        Potentially a dsol-experiment project could be created at some point in time with an
        improved version of the xml parsing classes. 
      </action>
      <action dev="averbraeck" type="update">
        The double entries of the classes 'BoxAndWhiskerChart', 'Histogram' and 'XYChart'
        have been removed. The classes have been combined into one new class, as they only
        differed in terms of the constructors.
      </action>
      <action dev="averbraeck" type="update">
        The package names of the swing implementation of the UI have been renamed to contain
        the word 'swing'.
      </action>
      <action dev="averbraeck" type="add">
        In order to accommodate the dsol-web implementation, the dsol-swing project has
        been split into a dsol-animation project with the implementation-independent
        animation classes and a dsol-swing package with the swing-dependent implementation 
        of the user interface and animation. dol-web contains the Web-specific 
        implementation of the animation and user interface.
      </action>
      <action dev="averbraeck" type="add">
        The ParamComments utility class has been added to the dsol-build-tools project. 
        It adds or updates the type for each parameter in the javadoc of all java files in 
        /src/main/java in all or in selected projects in the workspace. After running the
        utility, do a refresh on all projects, followed by a Source - Format.
      </action>
      <action dev="averbraeck" type="fix">
        The .classpath files have a classpathentry for /src/main/resources after a Maven Update with
        an entry 'excluding="**" kind="src"'. The exclusion means that the export of a Runnable jar 
        in Eclipse does not work. Therefore this update on svn ensures that the export of a jar file
        works. Ensure that after each Maven Update in Eclipse, the "Excludes:" entry for 
        /src/main/resources in each project's Properties - Build path - Source is set to (None)
        before committing the sources!
      </action>
      <action dev="averbraeck" type="add">
        A small program called CleanClassfileFiles has been added to dsol-build-tools to help in
        setting the exclusions correctly in the build path. After running this program, do a 
        Project - Clean - All.
      </action>
      <action dev="averbraeck" type="update">
        Several experiments with server-side events (SSE), WebSockets, Ajax/jQuery in dsol-web to see
        what the best implementation is for the web-based interaction with DSOL models.
      </action>
    </release>
    
    <release version="3.02.05" date="2018-09-30" description="Javadoc cleaned up">
      <action dev="averbraeck" type="update">
        dsol-naming, dsol-event, dsol-interpreter, dsol-introspection were updated with the 
        correct copyright notice and package-info.java files for each of the packages.
      </action>
      <action dev="averbraeck" type="update">
        The references to java.sun.com in dsol-interpreter have been updated to the SE8 JVM Specification
        at https://docs.oracle.com/javase/specs/jvms/se8/html/index.html.
      </action>
    </release>
    
    <release version="3.02.04" date="2018-09-29" description="Simulator events more logical; more non-final methods">
      <action dev="averbraeck" type="fix">
        The END_REPLICATION_EVENT was fired twice. Therefore, a special endReplication() method has 
        been implemented that just takes care of the end of the replication.
      </action>
      <action dev="averbraeck" type="fix">
        The TIME_CHANGED_EVENT of the DEVSSimulator fired at each event, and acted more as a 
        state changed event. Now, the TIME_CHANGED_EVENT only fires when the time did actually change. 
      </action>
      <action dev="averbraeck" type="update">
        Deleted the dsol-fx project; animation with be done with dsol-swing and dsol-web.
      </action>
      <action dev="averbraeck" type="update">
        dsol-base and dsol-core were updated with the correct copyright notice and package-info.java files
        for each of the packages.
      </action>
      <action dev="averbraeck" type="add">
        The SimTime classes got two extra methods: A getAbsoluteZero() and R getRelativeZero(). 
        Method diff(A) has been added. T.diff(A) returns R.
      </action>
      <action dev="averbraeck" type="update">
        The methods T.minus(A):R and T.minus(T):R have been renamed to T.diff(A):R and T.diff(T):R, because
        the erasure of T.minus(A) and T.minus(R) is the same for the SimTimeDouble, SimTimeFloat and
        SimTimeLong classes.
      </action>
      <action dev="averbraeck" type="update">
        The DEVS classes in dsol-core have been expanded with generics with respect to SimTime.
      </action>
      <action dev="averbraeck" type="update">
        The flow classes in dsol-core have been expanded with generics with respect to SimTime.
      </action>
      <action dev="averbraeck" type="add">
        The AnimationPanel in dsol-swing has an extra method called 
        isShowClass(final Class&lt;? extends Locatable&gt; locatableClass);
      </action>
      <action dev="averbraeck" type="update">
        Most of the methods in the AnimationPanel class in dsol-swing have been declared as non-final.
      </action>
      <action dev="averbraeck" type="update">
        The paint() method in Renderable2D in dsol-swing has been declared as non-final.
      </action>
      <action dev="averbraeck" type="update">
        The InputListener in the animation.D2.mouse package in dsol-swing does not select an object when
        the CTRL-key is pressed during a click on the object.
      </action>
    </release>
      
    <release version="3.02.03" date="2018-09-23" description="Added CategoryLogger and SimLogger">
      <action dev="averbraeck" type="add">
        A CategoryLogger has been added to the logger package in dsol-base. For the CategoryLogger it is
        possible to turn categories on and off for display, enabling fine-grained debugging and reporting.
        CategoryLogger uses tinylog's Logger for the actual logging work.  
      </action>
      <action dev="averbraeck" type="add">
        A SimLogger has been added to the logger package in dsol-core. The SimLogger extends the 
        CategoryLogger and is able to display the simulation time as part of the log message.
        A SimTimeFormatter class determines how the message with time is formatted. 
      </action>
      <action dev="averbraeck" type="update">
        All calls to printStackTrace() and to older loggers has been replaced by calls to the 
        CategoryLogger (in dsol-base, dsol-event, dsol-naming, dsol-interpreter, dsol-introspection),
        or to the SimLogger (in dsol-core, dsol-swing, dsol-web, dsol-demo).
      </action>
    </release>
      
    <release version="3.02.02" date="2018-09-15" description="Replaced log4j2 with tinylog">
      <action dev="averbraeck" type="update">
        As log4j2 is quite complicated to configure, it has been replaced by the faster 
        and smaller tinylog package. 
      </action>
      <action dev="averbraeck" type="fix">
        The Console in dsol-swing has been repaired so it captures the log stream again. This is done with
        a second logging Writer that acts in parallel with the system console writer. Levels and message 
        format strings can be set separately for the system console logger and the swing console logger.  
        Level and message format can be changed with console.setLogLevel(...) and
        console.setLogMessageFormat(...).
      </action>
      <action dev="averbraeck" type="add">
        In order to support logging to the console, the DSOLPanel got a getConsole() method.
      </action>
      <action dev="averbraeck" type="add">
        The text colors on the Console in dsol-swing are adapted for the Logger.level.
      </action>
      <action dev="averbraeck" type="add">
          Static helper class ConsoleLogger has been added to easily set or change the logging level 
          and format for the system console logger. Call first with ConsoleLogger.create(), and
          do this before any other (parallel) loggers have been created, such as the swing logger.
          Level and message format can be changed with ConsoleLogger.setLevel(...) and
          ConsoleLogger.setMessageFormat(...).
      </action>
    </release>

    <release version="3.02.01" date="2018-09-09" description="Solved NPE in animation; documentation updated">
      <action dev="averbraeck" type="fix">
        The documentation has been repaired. Several links were not working. some inheritance is used
        in the site.xml file. The site.vm files for Doxia have been updated to the latest version. 
        Included a relativizeDecorationLinks option set to false in the maven.site section in the pom file
        to properly render the menus in the site (absolute paths instead of relative ones).
      </action>
      <action dev="averbraeck" type="fix">
        The ImageRenderable in dsol-swing gave a NullPointerException when loading the image. An extra check
        has been built in.
      </action>
      <action dev="averbraeck" type="add">
        SimEventInterface and LambdaSimEvent got easy access classes for the different types of clocks.
      </action>
    </release>

    <release version="3.02.00" date="2018-09-08" description="DJUNITS time units for the Simulator classes">
      <action dev="averbraeck" type="add">
        The SimEvent got easy access classes. So you can now, e.g., construct a SimEvent.TimeDouble that
        takes a double as the execution time.
      </action>
      <action dev="averbraeck" type="update">
        The "easy access" constructors of Treatment and Replication now take parameters in absolute and
        relative time units rather than SimTime. So a new Treatment.TimeDoubleUnit takes as parameters:
        (Time startTime, Duration warmupPeriod, Duration runLength). This is a lot more clear than
        using SimTime wrappers. The general Treatment and Replication constructors still needs a SimTime.
        Extra methods getStartSimTime(), getWarmupSimTime() and getEndSimTime() have been added to the
        Treatment in case the wrapper object are needed, e.g., for comparison or adding/subtracting
        durations.
      </action>
      <action dev="averbraeck" type="update">
        Simulator.getSimulatorTime() returns the absolute time A rather than the SimTime T. This makes
        coding a lot easier, as the wrapper T is only used to implement the internals of adding and
        subtracting absolute and relative simulation times, but should actually never be exposed to the
        user, unless the user is really interested in the wrapper. For this, the method
        Simulator.getSimTime() has been implemented, which returns a SimTime object.
      </action>
      <action dev="averbraeck" type="fix">
        Utilization in dsol-core now uses generics for time.
      </action>
      <action dev="averbraeck" type="update">
        The Simulator classes do not use the internal TimeUnit classes anymore. Instead, the Time and
        Duration from DJUNITS have been used. This holds for the TimeDoubleUnit, TimeFloatUnit,
        CalendarDouble
        and CalendarFloat. TimeLongUnit has been removed, as it did not really make
        sense how it was implemented. CalendarLong uses a relative Long to indicate time in milliseconds.
      </action>
      <action dev="averbraeck" type="update">
        Most of the Model and Simulator methods and constructors do not throw RemoteExceptions anymore.
        RemoteExceptions are only thrown for the Listeners and Context (for the animation), as both of these
        are expected to be Remote sometimes. This means that statistics like Tally, Persistent, and Counter
        throw RemoteExceptions on construction and adding series, as these are dependent on (possibly remote)
        events.
      </action>
      <action dev="averbraeck" type="fix">
        The ImmutableCollections have been updated to avoid accepting a List in the constructor of an ImmutableSet
        when the copyOrWrap is Immutable.WRAP. The size() of the original List and the ImmutableSet
        were different in case of duplicates in the List, which was terribly confusing. Therefore, accepting
        a Collection should always lead to a COPY, whereas a 'compatible' Collection can use the WRAP.
        In addition, wrapping has become a lot more strict. An ImmutableSortedMap wraps only a SortedMap,
        whereas an ImmutableHashMap wraps a Map. Originally, they could wrap each other, leading to
        incompatibilities. The same holds for Lists and Sets.
      </action>
      <action dev="averbraeck" type="update">
        Updated all maven dependencies and libraries to their latest version in the dsol pom-file.
      </action>
      <action dev="averbraeck" type="add">
        StateSaver class included in dsol-base.
        dsol-core is now not dependent anymore on xstream to do state-save and state-retrieve for rollback.
      </action>
    </release>

    <release version="3.01.06" date="2017-04-30" description="dsol-demo repaired and added to project">
      <action dev="averbraeck" type="add">
        The dsol-demo project has been repaired and is from now on again a formal part of the dsol framework.
      </action>
      <action dev="averbraeck" type="update">
        Renderable2D.contains() method is made non-final to allow returning false for non-clickable animation items.
      </action>
      <action dev="averbraeck" type="add">
        Added GISRenderable2D constructor with a z-value.
      </action>
      <action dev="averbraeck" type="add">
        Added setBackground(boolean) method in GIS Map.
      </action>
    </release>

    <release version="3.01.05" date="2017-04-17" description="Unique id of AbstractSimEvent repaired">
      <action dev="averbraeck" type="fix">
        When parallel threads constructed a SimEvent, the uniqueness of the id was not guaranteed.
        An AtomicLong solves this problem.
      </action>
    </release>

    <release version="3.01.04" date="2017-01-26" description="dsol-swing: Renderable2D, map layers">
      <action dev="averbraeck" type="update">
        Renderable2D and derived classes can now specify the Locatable as their source.
      </action>
      <action dev="averbraeck" type="update">
        Data that is shown on the screen is not clickable for viewing or displaying.
      </action>
      <action dev="averbraeck" type="add">
        The ESRI Map can return the layers as a Map from String (name) to Layer.
      </action>
      <action dev="averbraeck" type="add">
        The layers in the ESRI Map can be toggled on or off with the showLayer and the hideLayer methods.
      </action>
      <action dev="averbraeck" type="fix">
        Repaired bug for caching of shape-file content for an extent.
      </action>
    </release>

    <release version="3.01.03" date="2017-01-14" description="Renderable2D">
      <action dev="averbraeck" type="update">
        Renderable2D.destroy() has been made non-final so it can be overridden.
      </action>
      <action dev="averbraeck" type="update">
        A Renderable2D can be added or removed from within the paint() method. This is, however, not really
        advisable, as this will only be done when the object is visible on the screen.
      </action>
      <action dev="averbraeck" type="add">
        Default log4j-2 configuration file added to dsol-base.
      </action>
    </release>

    <release version="3.01.02" date="2016-12-11" description="Immutable collections, toggling of layers in AnimationPanel">
      <action dev="averbraeck" type="add">
        The ImmutableCollections from opentrafficsim have been added to dsol-base.
      </action>
      <action dev="averbraeck" type="update">
        The AnimationPanel supports showing and hiding of layers, based on the class of the Locatable object.
      </action>
      <action dev="averbraeck" type="update">
        DSOL is now compiled with Java version 1.8.
      </action>
    </release>

    <release version="3.01.01" date="2016-10-23" description="Throw class extended">
      <action dev="averbraeck" type="update">
        The Throw class now also is able to return an object (its first parameter) to allow for its use in a
        super(...) call.
      </action>
    </release>

    <release version="3.01.00" date="2016-10-16" description="dsol-base project split, log4j instead of logger">
      <action dev="averbraeck" type="add">
        A Throw class with Throw.throw(condition, ...) and Throw.whenNull(object, ...) has been added to dsol-base to
        easily check pre- and post-conditions in constructors and methods.
      </action>
      <action dev="averbraeck" type="update">
        The dsol-base project is split into dsol-base, dsol-interpreter, dsol-introspection, dsol-event and dsol-naming.
      </action>
      <action dev="averbraeck" type="update">
        The internal dsol logger is retired and replaced by the log4j version 2 logger.
      </action>
      <action dev="averbraeck" type="add">
        The DEVSSimulatorInterface.scheduleXXX methods now return the event that they have scheduled. This enables
        the user to easily store the event for later cancellation.
      </action>
      <action dev="averbraeck" type="fix">
        Timed events report the time as the absolute time rather than as the time wrapper.
      </action>
      <action dev="averbraeck" type="fix">
        Statistical events sent by Persistent made different from those by Tally. The events within dsol-core are now
        timed events.
      </action>
    </release>

    <release version="3.00.21" date="2016-09-12" description="Simulators with and without firing certain events">
      <action dev="averbraeck" type="update">
        DEVSRealTimeClock can fire CHANGE_SPEED_FACTOR_EVENT.
      </action>
      <action dev="averbraeck" type="update">
        Simulator can start() without firing event.
      </action>
      <action dev="averbraeck" type="update">
        Simulator can stop() without firing event.
      </action>
      <action dev="averbraeck" type="update">
        Simulator can step() without firing event.
      </action>
    </release>

    <release version="3.00.20" date="2016-04-21" description="Animation classes updated, interface names simplified">
      <action dev="averbraeck" type="fix">
        GisRenderable2D uses a self-generated unique id to identify itself in the Context. This avoids problems with
        Locatable objects that don't have a unique toString() result and therefore could not be
        distinguished.
      </action>
      <action dev="averbraeck" type="update">
        Renamed LocatableInterface to Locatable.
      </action>
      <action dev="averbraeck" type="update">
        Renamed ModelInterface to DSOLModel.
      </action>
      <action dev="averbraeck" type="add">
        Added a Identifiable&lt;T&gt; to identify instances with a getId() method. Subclasses Long and String have been
        created as well.
      </action>
    </release>


    <release version="3.00.19" date="2016-03-28" description="Extra method in DEVSSimulator, zooming and (x,y) in swing">
      <action dev="averbraeck" type="add">
        Added the method 'runUpToAndIncluding' in the DEVSSimulatorInterface and implemented the method in
        all classes that implement this interface.
      </action>
      <action dev="averbraeck" type="fix">
        In the dsol-swing project, changed the zoom with the scroll wheel to scroll around the cursor. The zoom
        with the plus and minus keys still zoom around the center position of the window.
      </action>
      <action dev="averbraeck" type="add">
        x and y positions of the mouse in world coordinates are shown with a tooltip. The tooltip can be switched
        on and off.
      </action>
      <action dev="averbraeck" type="add">
        x and y positions of the mouse in world coordinates can be requested with a method to show elsewhere on the
        control panel of a simulation.
      </action>
      <action dev="averbraeck" type="fix">
        In the dsol-swing project, ensured in the introspection package that no errors will be given when the source
        has been deleted.
      </action>
      <action dev="averbraeck" type="add">
        In the dsol-swing project, created a method to zoom to the entire animation, and a public callable method to
        zoom to the whole extent as well as to set the default extent.
      </action>
      <action dev="averbraeck" type="fix">
        In the dsol-swing project, fixed a small error in computeVisibleExtent(...) that caused extent zoom actions
        to be off sometimes.
      </action>
    </release>


    <release version="3.00.18" date="2015-12-13" description="DEVSRealTimeClock improved thread-safety">
      <action dev="averbraeck" type="fix">
        Improved the thread-safety of the DEVSRealTimeClock.
      </action>
      <action dev="averbraeck" type="fix">
        Improved the alignment of the DEVSRealTimeClock with the wall-clock.
      </action>
    </release>


    <release version="3.00.17" date="2015-11-30" description="ESRI user-defined transformation">
      <action dev="averbraeck" type="add">
        ESRI shape files can be parsed with a user-defined transformation.
        The old constructors have been kept, so they can also be parsed as before.
      </action>
    </release>


    <release version="3.00.16" date="2015-11-30" description="Added dsol-akka project, javadoc cleanup">
      <action dev="averbraeck" type="add">
        Added the dsol-akka project. Still empty, just as a reference for future developments.
      </action>
      <action dev="averbraeck" type="fix">
        Cleaned up a lot of the outdated javadoc.
      </action>
    </release>


    <release version="3.00.15" date="2015-09-27" description="Improved website for docs">
      <action dev="averbraeck" type="update">
        Site generation has been updated. All DSOL projects now have a site with an adapted Velocity template and
        CSS updates. The Apache Velocity template has been based on theMaven Stylus Skin, version
        1.5. A possibility
        to link to a site in a target="_blank" window has been added to the site.vm file. In addition, several of the menus
        have been updated, streamlined, and brought up-to-date with the latest changes in the Maven site
        standards.
      </action>
      <action dev="averbraeck" type="update">
        Simulator class does not throw RemoteExceptions anymore on most common scheduling methods, as this was not needed.
      </action>
    </release>


    <release version="3.00.14" date="2015-07-05" description="ClassUtil and Renderable2D repaired">
      <action dev="averbraeck" type="update">
        Changes file is kept the same for all projects, as all projects increase
        version numbers at once.
      </action>
      <action dev="averbraeck" type="update">
        ClassUtil: cache the super constructors, methods, fields as well at the super constructors, methods, fields
        to avoid repetitive lookup of super constructors, methods, and fields, which can take a
        lot of time.
      </action>
      <action dev="averbraeck" type="update">
        Renderable2D: use the hashCode to store the renderable in the context tree. Guarantee a reproducible hashCode
        and equals. The toString() also gives the hashCode() as this can be used to identify the
        Renderable2D
        in the context tree.
      </action>
    </release>


    <release version="3.00.13" date="2015-07-05" description="jdepend and javancss code metric tools added">
      <action dev="averbraeck" type="add">
        Two code metrics tools are added to the project reports: JDepend and
        JavaNCSS. They provide information on cyclometric complexity, fan in, fan out, etc.
      </action>
    </release>


    <release version="3.00.12" date="2015-06-22" description="Context, Replication, and cleaning up memory">
      <action dev="averbraeck" type="update">
        Use of Context rationalized and standardized.
      <![CDATA[
<pre>
Context becomes: 
/experiment_hash_code/replication_number_or_id/animation/2D/renderables
/experiment_hash_code/replication_number_or_id/animation/3D/renderables
/experiment_hash_code/replication_number_or_id/statistics/graphs

Code for binding a statistic:
  Context context = ContextUtil.lookup(simulator.getReplication().getContext(), "/statistics");
  ContextUtil.bind(context, this);

Code for binding a renderable2D:
  Context context = ContextUtil.lookup(simulator.getReplication().getContext(), "/animation/2D");
  ContextUtil.bind(context, this);

Removing the entire tree of an experiment:
  experiment.removeFromContext();
or if you just have a simulator:
  simulator.getReplication().getExperiment().removeFromContext();
</pre>
]]>
      </action>
      <action dev="averbraeck" type="add">
        ContextUtil: extended methods to be symmetrical (bind-unbind) and
        (initial-given) contexts.
      </action>
      <action dev="averbraeck" type="update">
        The Replication caches the context.
      </action>
      <action dev="averbraeck" type="remove">
        Caching a context is removed from the Simulator.
      </action>
      <action dev="averbraeck" type="add">
        ContextUtil.destroySubContext method added to recursively remove subcontexts
        and bindings.
      </action>
      <action dev="averbraeck" type="add">
        Added a cleanUp() method to the Simulator to explicitly kill the worker
        thread that takes care of execution.
      </action>
      <action dev="averbraeck" type="add">
        Added a cleanUp() method to the WorkerThread to explicitly kill the worker
        thread.
      </action>
      <action dev="averbraeck" type="add">
        StatusBar got a cancelTimer() method to dispose of the timer so the StatusBar
        can be garbage collected.
      </action>
    </release>


    <release version="3.00.11" date="2015-06-18" description="DSOLPanel, GridPanel changed">
      <action dev="averbraeck" type="update">
        Hierarchy for AnimationPanel and GridPanel changed.
      </action>
      <action dev="averbraeck" type="update">
        Several changes in DSOLPanel.
      </action>
      <action dev="averbraeck" type="fix">
        Fixed the jittergrid.
      </action>
    </release>


    <release version="3.00.10" date="2015-05-20" description="Cobertura added, runUpTo method, GridPanel changed">
      <action dev="averbraeck" type="add">
        Cobertura 2.7 used for Java 8.
      </action>
      <action dev="averbraeck" type="add">
        DEVSSimulator has a runUpTo(absoluteTime) method.
      </action>
      <action dev="averbraeck" type="add">
        GridPanel extends a BorderPanel, so panels can be placed N, S, E and W of the
        animation, e.g. to provide buttons or a legend.
      </action>
    </release>


    <release version="3.00.09" date="2015-05-01" description="ESDEVS package extended">
      <action dev="averbraeck" type="add">
        Several extensions were made in the ESDEVS package:
        AbstractDEVSPortModel got two new methods:
<![CDATA[
<pre>
    public final Map<String, InputPortInterface<?>> getInputPortMap()
    public final Map<String, OutputPortInterface<?>> getOutputPortMap()
</pre>
]]>
      </action>
      <action dev="averbraeck" type="add">
        CoupledModel got four extra methods:
<![CDATA[
<pre>
    public final Set<IC<?>> getInternalCouplingSet()
    public final Set<EOC<?>> getExternalOutputCouplingSet()
    public final Set<EIC<?>> getExternalInputCouplingSet()
    public final Set<AbstractDEVSModel> getModelComponents()
</pre>
]]>
      </action>
      <action dev="averbraeck" type="add">
        Phase got one new method:
<![CDATA[
<pre>
    public final String getName()
</pre>
]]>
      </action>
    </release>


    <release version="3.00.08" date="2015-05-01" description="AtomicModel.initialize() method allows re-initialization">
      <action dev="averbraeck" type="add">
        The AtomicModel.initialize() method in ESDEVS has been changed to allow for re-initialization, e.g. after
        rollback. The method now looks as follows:
<![CDATA[
<pre>
  public void initialize(final double e)
  {
    if (this.timeAdvance() != Double.POSITIVE_INFINITY)
    {
      try
      {
        this.nextEvent = new SimEvent<SimTimeDouble>(
            this.getSimulator().getSimulatorTime().plus(this.timeAdvance() - e), this, this,
            "deltaInternalEventHandler", null);
        this.timeLastEvent = this.getSimulator().getSimulatorTime().get();
        this.simulator.scheduleEvent(this.nextEvent);
      }
      catch (RemoteException | SimRuntimeException exception)
      {
        Logger.severe(this, "initialize", exception);
      }
    }
    else
    {
      this.nextEvent = null;
    }
  }
</pre>
]]>
      </action>
    </release>


    <release version="3.00.07" date="2015-04-29" description="DEVSRealTimeClock added">
      <action dev="averbraeck" type="add">
        DEVSRealTimeClock has been added.
      </action>
      <action dev="averbraeck" type="add">
        old RealTimeClock has been removed.
      </action>
      <action dev="averbraeck" type="add">
        DEVSRealTimeClock has been given a speed factor.
      </action>
    </release>


    <release version="3.00.06" date="2015-04-26" description="Rollbackable random stream">
      <action dev="averbraeck" type="add">
        Made it possible to save and restore a state of a RandomStream, e.g. to make
        a model to rollback to an earlier state.
      </action>
      <action dev="averbraeck" type="add">
        Two methods have been added: saveState() : Object and restoreState(Object o).
      </action>
    </release>


    <release version="3.00.05" date="2015-04-23" description="ESDEVS additions">
      <action dev="averbraeck" type="add">
        ESDEVS formalism files in DSOL-CORE upgraded with comments, final modifiers, and appropriate visibility
        for
        modifiers. In addition, the following variables in AtomicModel have changed visibility:
      <![CDATA[
      <ol>
        <li>In AtomicModel.java file, changed private double timeLastEvent; to protected double timeLastEvent</li>
        <li>In the same file, changed private double timeNextEvent; to protected double timeNextEvent</li>
        <li>In the same file, changed private double elapsedTime; elapsedTime</li>
        <li>protected boolean conflictStrategy = AtomicModel.INTERNAL_FIRST; instead of private in AtomicModel</li>
        <li>non-final public SimEvent<SimTimeDouble> getNextEvent() in AtomicModel</li>
      </ol>
      ]]>
      </action>
    </release>


    <release version="3.00.04" date="2015-04-22" description="Easy access classes updated and extended">
      <action dev="averbraeck" type="add">
        Extended Replication, Experiment and Treatement with easy access classes.
      </action>
      <action dev="averbraeck" type="add">
        Repaired a number of dependencies in the easy access classes of Simulators.
      </action>
      <action dev="averbraeck" type="update">
        Comments in dsol-core updated.
      </action>
    </release>


    <release version="3.00.03" date="2014-09-14" description="Textual changes, small bugs, omissions">
      <action dev="averbraeck" type="fix">
        Changes for version 3.00.03. A lot of them are textual, a few to solve minor
        bugs and omissions.
      </action>
    </release>


    <release version="3.00.02" date="2014-09-05" description="valueOf() method replaces new Integer()">
      <action dev="averbraeck" type="update">
        valueOf() methods instead of new Integer() etc.
      </action>
      <action dev="averbraeck" type="fix">
        Small change in SimTime to satisfy Resource.
      </action>
    </release>

    <release version="3.00.01" date="2014-08-12" description="SimTime and Animator classes">
      <action dev="averbraeck" type="update">
        Split the Animator into a DEVSAnimator and a DEVDESSAnimator class.
      </action>
      <action dev="averbraeck" type="update">
        SimTime relative number has to extend Number to get values for e.g., graphs.
      </action>
      <action dev="averbraeck" type="update">
        Comments.
        Final methods.
        Final fields.
        Checkstyle conventions.
      </action>
    </release>


    <release version="3.00.00" date="2014-08-09" description="New version 3.00 release of DSOL">
      <action dev="averbraeck" type="add">
        Complete project restructuring compared to DSOL 2.0. See website
        <![CDATA[<a href="http://simulation.tudelft.nl/simulation/index.php/dsol/dsol-3-java-7">
        http://simulation.tudelft.nl/simulation/index.php/dsol/dsol-3-java-7</a>]]>
        for more information.
      </action>
    </release>

  </body>
</document>